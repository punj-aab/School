@model StudentTracker.Core.Entities.Schedule

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_LayoutBlueMoon.cshtml";
}

<div class="sub-nav">
</div>
<div class="dashboard-wrapper">
    @using (Html.BeginForm("Create", "Schedule", FormMethod.Post, new { @class = "form-horizontal no-margin", @id = "myform" }))
    {
        <div class="left-sidebar">
            <div class="row-fluid">
                <div class="span12">
                    <div class="widget">
                        <div class="widget-header">
                            <div class="title">
                                New Schedule
                            </div>
                            <span class="tools">
                                <a class="btn btn-info" href="#" id="btnAdd" action="create" data-original-title="">Save</a>
                                <a class="btn btn-info" href="/Schedule" data-original-title="">Cancel</a></span>
                        </div>
                        <div class="widget-body">

                            @Html.AntiForgeryToken()
                            @Html.ValidationSummary(true)
                            @if (User.IsInRole("SiteAdmin"))
                            {
                                <div class="control-group">
                                    @Html.LabelFor(m => m.OrganizationId, new { Class = "control-label" })
                                    <div class="controls">

                                        @Html.DropDownListFor(m => m.OrganizationId, Model.OrganizationList, "Select Organization", new { Class = "span6", onChange = "GetCourseAndDepartment(event)", action = "GetDepartmentandCourse", getType = "Course" })
                                        @Html.ValidationMessageFor(m => m.OrganizationId)

                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="control-group">
                                    @Html.LabelFor(m => m.OrganizationId, new { Class = "control-label" })
                                    <div class="controls">

                                        <label class="control-label" for="OrganisationId" style="text-align: left">@ViewBag.Organization</label>
                                        @Html.HiddenFor(m => m.OrganizationId)

                                    </div>
                                </div>
                            }

                            <div class="control-group">
                                @Html.LabelFor(m => m.CourseId, new { Class = "control-label" })
                                <div class="controls">

                                    @Html.DropDownListFor(m => m.CourseId, Model.CourseList, "Select Course", new { Class = "span6", onChange = "GetData(event)", action = "GetClasses", getType = "Class" })
                                    @Html.ValidationMessageFor(m => m.CourseId)

                                </div>
                            </div>
                            <div class="control-group">
                                @Html.LabelFor(m => m.ClassId, new { Class = "control-label" })
                                <div class="controls">

                                    @Html.DropDownListFor(m => m.ClassId, Model.ClassList, "Select Class", new { Class = "span6", onChange = "GetData(event)", action = "GetSubjects", getType = "Subject" })
                                    @Html.ValidationMessageFor(m => m.ClassId)

                                </div>
                            </div>
                            <div class="control-group">
                                @Html.LabelFor(m => m.SubjectId, new { Class = "control-label" })
                                <div class="controls">

                                    @Html.DropDownListFor(m => m.SubjectId, Model.SubjectList, "Select Subject", new { Class = "span6" })
                                    @Html.ValidationMessageFor(m => m.SubjectId)

                                </div>
                            </div>
                            <div class="control-group">
                                @Html.LabelFor(m => m.DepartmentId, new { Class = "control-label" })
                                <div class="controls">

                                    @Html.DropDownListFor(m => m.DepartmentId, Model.DepartmentList, "Select Department", new { Class = "span6", onChange = "GetData(event)", action = "GetClassRooms", getType = "ClassRoom" })
                                    @Html.ValidationMessageFor(m => m.DepartmentId)

                                </div>
                            </div>
                            <div class="control-group">
                                @Html.LabelFor(m => m.ClassRoomId, new { Class = "control-label" })
                                <div class="controls">

                                    @Html.DropDownListFor(m => m.ClassRoomId, Model.ClassRoomList, "Select ClassRoom", new { Class = "span6" })
                                    @Html.ValidationMessageFor(m => m.ClassRoomId)

                                </div>
                            </div>

                            <div class="control-group">
                                @Html.LabelFor(m => m.ScheduleName, new { Class = "control-label" })
                                <div class="controls controls-row">
                                    @Html.TextBoxFor(m => m.ScheduleName, new { placeholder = "Schedule Name", Class = "span6" })
                                    @Html.ValidationMessageFor(m => m.ScheduleName)
                                </div>
                            </div>
                            <div class="control-group">
                                @Html.LabelFor(m => m.Description, new { Class = "control-label" })
                                <div class="controls">
                                    @Html.TextAreaFor(m => m.Description, new { placeholder = "Description", Class = "span6", rows = "5" })
                                    @Html.ValidationMessageFor(m => m.Description)
                                </div>
                            </div>
                            <div class="control-group">
                                <label class="control-label">Select Day</label>
                                <div class="controls">

                                    @Html.DropDownListFor(m => m.DayId, Model.DayList, new { Class = "span6 multiselect", multiple = "multiple" })
                                    @Html.ValidationMessageFor(m => m.DayId)
                                    @Html.ValidationMessageFor(m => m.DayIds)

                                </div>
                            </div>
                            <div class="control-group">
                                <label class="control-label">Start Time</label>
                                <div class="controls">
                                    <div class="input-append bootstrap-timepicker">
                                        @Html.TextBoxFor(m => m.StartTime, new { placeholder = "Start Time", Class = "timePicker" })
                                        @Html.ValidationMessageFor(m => m.StartTime)
                                        <span class="add-on btn">
                                            <i class="icon-time"></i>
                                        </span>
                                    </div>
                                </div>
                            </div>
                            <div class="control-group">
                                <label class="control-label">End Time</label>
                                <div class="controls">
                                    <div class="input-append bootstrap-timepicker">
                                        @Html.TextBoxFor(m => m.EndTime, new { placeholder = "End Time", Class = "timePicker" })
                                        @Html.ValidationMessageFor(m => m.EndTime)

                                        <span class="add-on btn"><i class="icon-time"></i></span>
                                    </div>
                                </div>
                            </div>

                            @*<div class="form-actions no-margin">
                                <a name="submit" class="btn btn-primary" href="javascript:;" action="create" onclick="" id="btnAdd">Add Schedule</a>
                                <div class="clearfix">
                                </div>
                            </div>*@
                            @Html.HiddenFor(m => m.DayIds)
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="right-sidebar">
            @Html.Partial("_RightMenuPartial")
        </div>
    }
</div>
@section scripts{
    @HelperAssets.SaveAndLoadData("/Schedule/", "ViewSchedules");
    <script type="text/javascript">
        $(document).ready(function () {
            $('.timePicker').timepicker();
            //$('.timePicker').timepicker({
            //    minuteStep: 1,
            //    template: 'modal',
            //    showSeconds: true,
            //    showMeridian: false
            //});

            //binding multiselect
            $('.multiselect').multiselect({
                buttonClass: 'btn',
                buttonWidth: 'auto',
                buttonContainer: '<div class="btn-group" />',
                maxHeight: false,
                buttonText: function (options) {
                    if (options.length == 0) {
                        return 'None selected <b class="caret"></b>';
                    }
                    else if (options.length > 3) {
                        return options.length + ' selected <b class="caret"></b>';
                    }
                    else {
                        var selected = '';
                        var value = '';
                        options.each(function () {
                            selected += $(this).text() + ', ';
                            value += $(this).val() + ', ';

                        });

                        return selected.substr(0, selected.length - 2) + ' <b class="caret"></b>';
                    }
                }
            });


            $('#btnAdd').click(function (e) {
                var st = $('#StartTime').val();
                var et = $('#EndTime').val();
                if (Date.parse("1-1-2000 " + st) > Date.parse("1-1-2000 " + et)) {
                    alertify.alert("Start time cannot be greater than End time.");
                    return false;
                }
                var dayId = "";
                $('.multiselect-container>li.active').each(function () {
                    dayId += $(this).children().find('input').val() + ',';
                });
                $('#DayIds').val(dayId);

                Save(e);
            });


        });
    </script>
}